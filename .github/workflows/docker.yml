name: Publish Docker Image

on:
  workflow_dispatch:
  release:
    types: [published]
  pull_request:
    types: [synchronize, labeled, unlabeled]

env:
  REGISTRY_IMAGE: arvinxx/lobe-chat
  PR_TAG_PREFIX: pr-

jobs:
  build:
    if: |
      (github.event_name == 'pull_request' &&
       contains(github.event.pull_request.labels.*.name, 'Build Docker')) ||
      github.event_name != 'pull_request'

    strategy:
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-24.04-arm

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate PR metadata
        if: github.event_name == 'pull_request'
        id: pr_meta
        run: |
          branch_name="${{ github.head_ref }}"
          sanitized_branch=$(echo "${branch_name}" | sed -E 's/[^a-zA-Z0-9_.-]+/-/g')
          echo "pr_tag=${sanitized_branch}-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ env.PR_TAG_PREFIX }}${{ steps.pr_meta.outputs.pr_tag }},enable=${{ github.event_name == 'pull_request' }}
            type=semver,pattern={{version}},enable=${{ github.event_name != 'pull_request' }}
            type=raw,value=latest,enable=${{ github.event_name != 'pull_request' }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ matrix.platform }}
          context: .
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          push: true

      - name: Export manifest digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          echo "${digest#sha256:}" >> /tmp/digests/manifest.txt

      - name: Upload manifest digest
        uses: actions/upload-artifact@v4
        with:
          name: platform-digests
          path: /tmp/digests/manifest.txt

  merge:
    if: always()  # 确保 PR 构建也执行合并
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: platform-digests

      - name: Merge manifests
        run: |
          DIGESTS=$(cat /tmp/digests/**/manifest.txt | tr '\n' ' ')
          docker buildx imagetools create \
            -t ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.tags }} \
            $(echo "$DIGESTS" | sed "s| | ${{ env.REGISTRY_IMAGE }}@sha256:|g")
